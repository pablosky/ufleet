controlador viejo 25 de diciembre funcionando class ReservationsController < ApplicationController
  before_action :set_reservation, only: [:show, :edit, :update, :destroy]

  # GET /reservations
  # GET /reservations.json
  def search

   #@reservations = Reservation.new 
   @user= User.new 
   
   #t = Time.zone.parse("2013-12-12 16:35:00")
   #@reservations = Reservation.where(:inicio =>t)

   #ahora con between

   iniciof = Time.zone.parse("2012-12-12 16:35:00")
   finf =  Time.zone.parse("2014-12-12 16:35:00")

   #iniciof = "2012-12-12 16:35:00"
   #finf =  "2014-12-12 16:35:00"

   @reservations = Reservation.where(:inicio =>  iniciof .. finf)

  end

  def index

  
       # @reservations = Reservation.all.order('created_at DESC')
   
    @user = User.new #para carga del login
    @date = Time.now

    #@startweek= Date.new
    #@endweek = Date.new
    @DIA = @date.strftime("%A")

   
   #algoritmo de calculo de semana

    if  @date.monday?

       @startweek = @date
       @endweek = @date + 6.days

    elsif @date.tuesday?
            
       @startweek = @date - 1.days
       @endweek = @date + 5.days
       
    elsif @date.wednesday?
      
       @startweek = @date - 2.days
       @endweek = @date + 4.days

    elsif @date.thursday?
      
       @startweek = @date - 3.days
       @endweek = @date + 3.days

    elsif @date.friday?   

      @startweek = @date - 4.days
      @endweek = @date + 2.days

    elsif @date.saturday?

        @startweek = @date - 5.days
        @endweek = @date + 1.days
    
    elsif @date.sunday?    
      
      @startweek = @date - 6.days
      @endweek = @date 


    end
  #fin del inteligent de semanas

  @vehicles = Vehicle.all #todos los vehiculos para prueba
  @drivers = Driver.all # todos los chofer solo para uso de prueba


#busqueda

  
#todas las horas y fechas matrix

  @startweek = @startweek.beginning_of_day
  @endweek = @endweek.beginning_of_day
 
 
  inicio = Time.zone.parse(@startweek.strftime("%c"))
  fin =Time.zone.parse(@endweek.strftime("%c"))

#buscar desde @startweek hasta @endweek todas las reservas
 

 
@reservations = Reservation.where(:inicio =>  inicio .. fin )


  @lunes =[]
  @martes =[]
  @miercoles =[]
  @jueves =[]
  @viernes =[]
  @sabado =[]
  @domingo =[]

  @lunes << @startweek 
  @martes << inicio  + 1.days 
  @miercoles << inicio  + 2.days 
  @jueves << inicio  + 3.days 
  @viernes << inicio  + 4.days 
  @sabado << inicio  + 5.days 
  @domingo << inicio  + 6.days 

  i= 0

  until i > 14 do
    
    @lunes << @lunes[i] + (15 * 60)
    @martes << @martes[i] + (15 * 60)
    @miercoles << @miercoles[i] + (15 * 60)
    @jueves << @jueves[i] + (15 * 60)
    @viernes << @viernes[i] + (15 * 60)
    @sabado << @sabado[i]  + (15 * 60)
    @domingo << @domingo[i] + (15 * 60)
    i = i+1

  end


 #estructura

 @choferhora1 = []

 @drivers = Driver.all

 @vehicles =Vehicle.all

 #general
 

  lunes1 = Time.zone.parse(@lunes[0].strftime("%c")) 

# semanador = 0
# until semanador > 14
#   @lunes[semanador] = Time.zone.parse(@lunes[semanador].strftime("%c"))
#agregarle de martes. mierocles y demases
#   semanador=semanador+1
#end  

#poner lista de reservas  dentro de ciclo dentro de choferhora podria ser
#   
#   @reservaschoferlunes << Reservation.where("inicio <=  ?  AND fin >= ?" ,@lunes[contador] , @lunes[contador+1]) #
#   


  @reservaschoferlunes =  Reservation.where("inicio <=  ?  AND fin >= ?" ,lunes1 , lunes1 +(15*60)) 

  #para hacer el ciclo le agregamos lunes1 = lunes1 +(15*60) 
  
 @choferhora1 = [] #listadochoferes en hora
  @listachoferhora = [ ] # listado de choferes todo el dia

  listacounter = 0

 while listacounter < 15 
  
  @listachoferhora << @choferhora1  
# @reservaschoferlunes << Reservation.where("inicio <=  ?  AND fin >= ?" ,@lunes[listacounter] , @lunes[listacounter+1])
 listacounter = listacounter + 1 

 end


#@listachoferhora[0,0] << "hola" este funca


 
 #meterle un ciclo mas de las lista y cambiar @reservaschoferlunes[]
 ciclo grande

  j= 0

 @drivers.each do |driver|
   
   @choferhora1 << "libre"
   @listachoferhora[0,j] << "libre"

   @reservaschoferlunes.each do |reserva|
  
      if driver.id == reserva.driver_id

        @choferhora1[j]= "ocupado"
        @listachoferhora[0,j] << "ocupado"
             

      end
  
  end

  j=j+1

 end #fin de ciclo de estructura choferes


@listachoferhora[0,0] << "hola"






end

  # GET /reservations/1
  # GET /reservations/1.json
  def show
    @user= User.new
  end

  # GET /reservations/new
  def new
    @reservation = Reservation.new
    @user= User.new
  end

  # GET /reservations/1/edit
  def edit

    @user= User.new
  end

  # POST /reservations
  # POST /reservations.json
  def create
    @user= User.new


    #crear reservas del inicio al fin

    @reservation = Reservation.new(reservation_params)

    respond_to do |format|
      if @reservation.save
        format.html { redirect_to @reservation, notice: 'Reservation was successfully created.' }
        format.json { render action: 'show', status: :created, location: @reservation }
      else
        format.html { render action: 'new' }
        format.json { render json: @reservation.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /reservations/1
  # PATCH/PUT /reservations/1.json
  def update
    respond_to do |format|
      if @reservation.update(reservation_params)
        format.html { redirect_to @reservation, notice: 'Reservation was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @reservation.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /reservations/1
  # DELETE /reservations/1.json
  def destroy
    @reservation.destroy
    respond_to do |format|
      format.html { redirect_to reservations_url }
      format.json { head :no_content }
    end
  end

  def estadodia

      @user= User.new 
      @dia = Time.now

      @dia = @dia.beginning_of_day
      @findia = @dia + (60*59*24)

      @dia = Time.zone.parse(@dia.strftime("%c"))
      @findia = Time.zone.parse(@findia.strftime("%c"))

      @reservations  = Reservation.where(:inicio => @dia .. @findia)
      

  end



  private
    # Use callbacks to share common setup or constraints between actions.
    def set_reservation
      @reservation = Reservation.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def reservation_params
      params.require(:reservation).permit(:driver_id, :vehicle_id, :inicio, :fin, :descripcion)
    end



end
